const TelegramApi = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const dialogflow = require('@google-cloud/dialogflow').v2beta1;

const dbPath = './server.db';
const db = new sqlite3.Database(dbPath)
const uuid = require('uuid');

const token = "6038880701:AAEU-qypb7k2SrPH13O2Pn_si46XmHksgfQ"
const payment_token = "410694247:TEST:92a67171-8d9a-4665-806d-008029be1e25"
const bot = new TelegramApi(token, { polling: true })

const admins_id = [1432248216,1300210900];
const credentials = require('./key.json');

const sessionClient = new dialogflow.SessionsClient({ credentials });
const projectId = 'small-talk-rwvf';


/* export default function SendMSg(id,message) {
  bot.sendMessage(id,message);
} */

let lastToId = 0;
const MaxVideocards = [
  250,
  500,
  750,
]

const FarmingTimers = [
  7200,
  3600,
  1800,
] 
const VipRangs = [
  "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
  "–û–±—ã—á–Ω—ã–π –í–∏–ø",
  "MEGAVIP",
]

const Multiplies = [
  1,
  2,
  4,
]

const commands = [
  "/start - –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –±–æ—Ç–∞.",
  "/cash - –≤—ã–≤–æ–¥–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞.",
  "/farming - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏.",
  "/rich_top - –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø 10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
  "/ping - –≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞.",
  "/shop - –≤—ã–≤–æ–¥–∏—Ç –º–∞–≥–∞–∑–∏–Ω.",
  "/profile - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å (–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º).",
  "/clans - –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ø –±–æ–≥–∞—Ç—ã—Ö –∫–ª–∞–Ω–æ–≤.",
  "/give_c - –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º).",
  "/give_v - –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º).",
  "/post_sub - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è/–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ –∫–∞–Ω–∞–ª–∞.",
  "/code {–∫–æ–¥} - –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –∫—É—á–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω —Å –∫–æ–¥–æ–º."
]

const Clans = [
  "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
]


function CheckAdmin(message) {
  let admin = admins_id.includes(message.from.id) ? true:false
  return admin
}



function CheckAccount(row,message) {
  if (row == undefined) {
    db.run("INSERT INTO users (id, mention, name, cash, last_farming_time, isVIP, farmLimit, videocards, viruses, stopFarm, attacker, clan, goldfevervalue, mention, posting) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", [message.from.id, "", message.from.first_name, 20000, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    bot.sendMessage(message.chat.id,"üòä–¢—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)! \n–£–¥–∞—á–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!",{reply_to_message_id: message.message_id});
    return true;
  }
}

function FormatTime(seconds) {
  var hours = Math.floor(seconds / 3600);
  var minutes = Math.floor((seconds % 3600) / 60);
  var remainingSeconds = seconds % 60;

  hours = (hours < 10) ? "0" + hours : hours;
  minutes = (minutes < 10) ? "0" + minutes : minutes;
  remainingSeconds = (remainingSeconds < 10) ? "0" + remainingSeconds : remainingSeconds;

  return hours + ":" + minutes + ":" + remainingSeconds;
}
function FormatNum(num) {
  try {
    return num.toLocaleString('en-US', { minimumFractionDigits: 1 });
  } catch (error) {
    return num
  }

    
}

function createProcess(user_id, msg) {
  const name = msg.text;
  
  if (name.length <= 25) {
    db.run('UPDATE users SET cash = cash - ?, clan = ? WHERE id = ?', [20000000, name, user_id], (err) => {
      if (err) {
        console.error(err);
        return;
      }
      
      db.run('INSERT INTO clans (name, money, tanks, artillery, owner, points, shield, type) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [name, 20000000, 0, 0, user_id, 0, 0, 0], (err) => {
        if (err) {
          console.error(err);
          return;
        }
        bot.sendMessage(msg.chat.id, `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–∞! \nüßæ–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: ${name}\nüí∞–ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞: 20–ú$`);
      });
    });
  } else {
    bot.sendMessage(msg.chat.id, '‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! (–º–∞–∫—Å. 25 —Å–∏–º–≤–æ–ª–æ–≤)');
  }
}



bot.on("channel_post", async post => {
  if (post.chat.id !== -1001643266914) { return; }

  db.all("SELECT id, posting FROM users", async (err, rows) => {
    if (err) {
      console.error(err);
      return;
    }
    const messageIdToForward = post.message_id;
    bot.forwardMessage( -1001311536914,-1001643266914, messageIdToForward);
    rows.forEach(row => {
      const userId = row.id;
      

      if (messageIdToForward) {
        if (row.posting == 0) {
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${row.id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.`);
        } else {
          bot.forwardMessage(userId, -1001643266914, messageIdToForward)
            .then(() => {
              
            })
            .catch(error => {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${userId}: ${error.message}`);
              db.run("UPDATE users SET posting = ? WHERE id=?",["0",userId])
            });
        }
      } else {
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      }
    });
  });
});




//–û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î
bot.on("message", async message => {
  if (!message.text) {return}

    const user_id = message.from.id
    const user_name = message.from.first_name
    const user = message.from.username
    const profile_link = `<a href="tg://user?id=${user_id}">${user_name}</a>`
    const NewsChatId = -1001643266914

    //if (message.chat.id != -1001916437129) {
    // return
    //}

    
    if (message.from.username) {
      db.run("UPDATE users SET mention = ? WHERE id=?",[message.from.username,user_id])
    }else {
      db.run("UPDATE users SET mention = ? WHERE id=?",["",user_id])
    }
    try {
      if (message.text.toLowerCase() == "—É–±–∏—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `ü™ì | ${user_name} —É–±–∏–ª(–∞) ${message.reply_to_message.from.first_name} –Ω–æ–∂–æ–º –≤ —Å–µ—Ä–¥—Ü–µ.`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `ü•µ | ${user_name} –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª(–∞) ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üî´ | ${user_name} –∑–∞—Å—Ç—Ä–µ–ª–∏–ª(–∞) —Å –ø–∏—Å—Ç–æ–ª–µ—Ç–∞ ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "—É–¥–∞—Ä–∏—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üëä | ${user_name} —É–¥–∞—Ä–∏–ª(–∞) –≤ —á–µ–ª—é—Å—Ç—å ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "—Ä–∞—Å—á–ª–µ–Ω–∏—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üî™ | ${user_name} —Ä–∞—Å—á–ª–µ–Ω–∏–ª(–∞) ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–æ–±–Ω—è—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `ü§ó | ${user_name} –æ–±–Ω—è–ª(–∞) ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–ø–æ–∂–∞—Ç—å —Ä—É–∫—É") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `ü§ù | ${user_name} –∫—Ä–µ–ø–∫–æ –ø–æ–∂–∞–ª(–∞) —Ä—É–∫—É ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `‚úä | ${user_name} –º–æ—Ä–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞–ª(–∞) ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üòò | ${user_name} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞) ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "—Å—ä–µ—Å—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üòã | ${user_name} —Å—ä–µ–ª(–∞) –∑–∞–∂–∏–≤–æ ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–ø—Ä–æ–¥–∞—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `ü§ë | ${user_name} –ø—Ä–æ–¥–∞–ª(–∞) –∞—Ä–∞–±–∞–º ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–ø—Ä–æ–ø–∏—Å–∞—Ç—å –¥–≤–æ–µ—á–∫—É") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `ü¶∂ | ${user_name} –ø—Ä–æ–ø–∏—Å–∞–ª(–∞) –¥–≤–æ–µ—á–∫—É ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–Ω–∞–æ—Ä–∞—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üó£ | ${user_name} –Ω–∞–æ—Ä–∞–ª(–∞) –Ω–∞ ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–ø–µ—Ä–µ–µ—Ö–∞—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üöú | ${user_name} –ø–µ—Ä–µ–µ—Ö–∞–ª(–∞) –Ω–∞ —Ç—Ä–∞–∫—Ç–æ—Ä–µ ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–≤–∑–æ—Ä–≤–∞—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üí£ | ${user_name} –≤–∑–æ—Ä–≤–∞–ª(–∞) ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–ø–æ–±—Ä–∏—Ç—å") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `ü™í | ${user_name} –ø–æ–±—Ä–∏–ª(–∞) –Ω–∞–ª—ã—Å–æ ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      else if (message.text.toLowerCase() == "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Ç–∞–Ω–µ—Ü") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
      
        await bot.sendMessage(message.chat.id, `üíÉüï∫ | ${user_name} –ø—Ä–∏–≥–ª–∞—Å–∏–ª(–∞) –Ω–∞ —Ç–∞–Ω–µ—Ü ${message.reply_to_message.from.first_name}`, { reply_to_message_id: message.message_id })
        return;
      }
      

    } catch (error) {
      
    }

    if (message.reply_to_message && message.reply_to_message.from.username === 'eventshol_bot') {
      const sessionId = uuid.v4();
      const sessionPath = sessionClient.projectAgentSessionPath(projectId, sessionId);
      const request = {
        session: sessionPath,
        queryInput: {
          text: {
            text: message.text,
            languageCode: 'ru-RU',
          },
        },
      };
    
      try {
        const responses = await sessionClient.detectIntent(request);
        const result = responses[0].queryResult;
    
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if (result.fulfillmentText.trim() === '') {
          return
        } else {
          bot.sendMessage(message.chat.id, result.fulfillmentText, { reply_to_message_id: message.message_id, parse_mode: 'HTML' });
        }
      } catch (error) {
        bot.sendMessage(message.chat.id, '–ß—Ç–æ?', { reply_to_message_id: message.message_id, parse_mode: 'HTML' });
      }
    }
    else if (message.text == "/cash" || message.text == "/cash@eventshol_bot" || message.text.toLowerCase() == "–±–∞–ª–∞–Ω—Å") {
      try {
        db.get("SELECT cash, goldfevervalue FROM users WHERE id=?", user_id, async (err, row) => {
          if (CheckAccount(row,message)) {return}

          await bot.sendMessage(message.chat.id, "üí∞–£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É: " + FormatNum(row.cash) + "$\n‚öí–ó–∞—Ä–∞–±–æ—Ç–∞–π –±–æ–ª—å—à–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /farming",{reply_to_message_id: message.message_id})
        });
      } catch (error) {
        await bot.sendMessage(message.chat.id,"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
      }
    }

    else if (message.text == "/farming"  || message.text == "/farming@eventshol_bot" || message.text.toLowerCase() == "—Ñ–∞—Ä–º") {
      try {
        db.get("SELECT isVIP,videocards,last_farming_time FROM users WHERE id=?", user_id, async (err, row) => {
          if (CheckAccount(row,message)) {return}
  
          const isVIP = VipRangs[row.isVIP];
          const videocards = row.videocards;

          const lastFarmingTime = row.last_farming_time;
          const timeNow = Math.floor(Date.now() / 1000);
  
          if (timeNow - lastFarmingTime < FarmingTimers[row.isVIP]) {
            let TimeToUse = FarmingTimers[row.isVIP] - (timeNow - lastFarmingTime);
            bot.sendMessage(message.chat.id, "üí∏ –¢—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª –¥–æ—Ö–æ–¥ —Å –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—ã \n‚è≥–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ " + FormatTime(TimeToUse), { reply_to_message_id: message.message_id });
            return;
          }
  
          let randomCash = Math.floor(Math.random() * 9000) + 1000;
          randomCash *= Multiplies[row.isVIP];
          randomCash *= videocards > 1? (videocards):(1);
  
          let multiplyText = Multiplies[row.isVIP] * videocards;
          let textVideo = videocards > 1 ? videocards:'–ù–µ—Ç—É. \nüí†–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ.' 

          await bot.sendMessage(message.chat.id, "üí∞–¢—ã –ø–æ–ª—É—á–∏–ª(–∞): " + FormatNum(randomCash) + "$ —Å –¥–æ—Ö–æ–¥–∞ –º–∞–π–Ω–∏–Ω–≥–∞!\n\n‚≠êÔ∏è –¢–≤–æ–π VIP: " + isVIP + "\nüìº –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: "+textVideo+"\n‚úñÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: " + multiplyText, { reply_to_message_id: message.message_id });
          console.log(`${message.from.first_name} - ${timeNow}, Link - 'https://t.me/@id${message.from.id}'`)
          db.run('UPDATE users SET last_farming_time = ?,cash = cash + ? WHERE id = ?', [timeNow, randomCash,user_id]);
        });
      } catch (error) {
        await bot.sendMessage(message.chat.id,"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
      }
    }

    else if (message.text == "/ping"  || message.text == "/ping@eventshol_bot" || message.text.toLowerCase() == "–ø–∏–Ω–≥") {
      const start_time = Date.now();
      await bot.sendMessage(message.chat.id, 'Pinging...', { reply_to_message_id: message.message_id }).then(reply => {
        const end_time = Date.now();
        const ping_time = (end_time - start_time).toFixed(2); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        bot.editMessageText(`Pong! –ó–∞–¥–µ—Ä–∂–∫–∞: ${ping_time} ms`, { chat_id: message.chat.id, message_id: reply.message_id });
      }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      });
    }

    // else if (message.text == "/gold_top"  || message.text == "/gold_top@eventshol_bot" || message.text.toLowerCase() == "—Ç–æ–ø –∏–≤–µ–Ω—Ç–∞") {
    //   let msg = "ü§ë–¢–æ–ø-5 –ª–∏–¥–µ—Ä–∞ –∑–æ–ª–æ—Ç–æ–π –ª–∏—Ö–æ—Ä–∞–¥–∫–∏:\n"
    //   let index = 0
    //   db.each("SELECT Name name,goldFeverValue goldfevervalue FROM users ORDER BY -goldFeverValue LIMIT 5", [], (err, row) => {
    //     index++
    //     msg = msg + "\n"+index+ ") " + row.name + " - " + String(FormatNum(row.goldfevervalue)) + "$"
    //   }, async () => {
    //     await bot.sendMessage(message.chat.id, msg, { parse_mode: 'HTML', reply_to_message_id: message.message_id })
    //   })
    // }

    else if (message.text == "/rich_top"  || message.text == "/rich_top@eventshol_bot" || message.text.toLowerCase() == "—Ç–æ–ø –±–æ–≥–∞—á–µ–π") {
      let msg = "ü§ë–¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n"
      let index = 0
      db.each("SELECT Cash cash,Name name, Id id FROM users ORDER BY -Cash LIMIT 10", [], (err, row) => {
        index++
        msg = msg + `\n ${index}) <a href='tg://user?id=${row.id}'>${row.name}</a> - <code>${String(FormatNum(row.cash))}$</code>`
      }, async () => {
        await bot.sendMessage(message.chat.id, msg, { parse_mode: "HTML", reply_to_message_id: message.message_id, disable_notification: true})
      })
    }

    else if (message.text == "/start"  || message.text == "/start@eventshol_bot" || message.text.toLowerCase() == "—Å—Ç–∞—Ä—Ç") {
      try {
        await bot.sendMessage(message.chat.id,'–ü—Ä–∏–≤–µ—Ç, '+user_name+'! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',{reply_to_message_id: message.message_id,reply_markup: 
          JSON.stringify({
            inline_keyboard: [
              [{ text: 'üì≤–ö–æ–º–∞–Ω–¥—ã', callback_data: '/start.commands' }, { text: 'üëæ–†–ü-–∫–æ–º–∞–Ω–¥—ã', url: 'https://t.me/eventbotlive/78' }],
              [{ text: '‚ûï–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É', url: 'https://t.me/eventshol_bot?startgroup=true' }],
              [{ text: 'üì£–ö–∞–Ω–∞–ª –±–æ—Ç–∞', url: 'https://t.me/eventshol_live' }],
              [{ text: 'üí¨–ì—Ä—É–ø–ø–∞ –±–æ—Ç–∞', url: 'https://t.me/eventshol_chat' }]

            ]
          }
        )})
        

      } catch (error) {
        console.log(error)
        bot.sendMessage(message.chat.id,"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! \nE—Å–ª–∏ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –µ–≥–æ.")
      }
    }

    else if (message.text == "/shop"  || message.text == "/shop@eventshol_bot" || message.text.toLowerCase() == "–º–∞–≥–∞–∑–∏–Ω") {
      try {
        await bot.sendMessage(message.chat.id,'–ú–∞–≥–∞–∑–∏–Ω! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?',{reply_to_message_id: message.message_id,reply_markup: 
          JSON.stringify({
            inline_keyboard: [
              [{ text: 'üìº 1 –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ - 50–ö$', callback_data: '/shop.1Videocard'}],
              [{ text: 'üìº 50 –í–∏–¥–µ–æ–∫–∞—Ä—Ç  - 2,5–ú$', callback_data: '/shop.50Videocard' }],
              [{ text: 'üìº 100 –í–∏–¥–µ–æ–∫–∞—Ä—Ç  - 5–ú$', callback_data: '/shop.100Videocard' }],

              [{ text: '‚≠êÔ∏èVIP - 1–ú$', callback_data: '/shop.vip',},{ text: 'üåüMEGAVIP - 50–ú$', callback_data: '/shop.megavip' }],
            ]
          }
        )})


      } catch (error) {
        bot.sendMessage(message.chat.id,"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! \nE—Å–ª–∏ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –µ–≥–æ.", {reply_to_message_id: message.message_id })
      }
    }

    try {
      if (message.text.slice(0,7) == "/give_c") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
        
        db.get("SELECT cash FROM users WHERE id=?",[message.reply_to_message.from.id], async (err,rowr) => {
         
          if (rowr == undefined) {
            bot.sendMessage(message.chat.id, "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!", { reply_to_message_id: message.message_id })
          }else {
            db.get("SELECT cash FROM users WHERE id=?",[user_id], async (err,rows) => {
              
              if (CheckAccount(rows,message)) {return}
            
    
            if (user_id == message.reply_to_message.from.id) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!", { reply_to_message_id: message.message_id })
              return
            }
    
            if (message.reply_to_message.from.is_bot) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –±–æ—Ç—É!", { reply_to_message_id: message.message_id })
              return
            }
            
            let CashToGive = message.text.split(" ")[1]
            try {
              if (Number.isNaN(Number(CashToGive))) {return}
            }
            catch (error) {
              console.error(error)
              bot.sendMessage(message.chat.id, "–î–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–∏—Å–ª–æ–≤—ã–º!", { reply_to_message_id: message.message_id })
              return
            }
            if (Number.isInteger(Number(CashToGive)) == false) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ!", { reply_to_message_id: message.message_id })
              return
            }
            if (parseInt(CashToGive)<= 0) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é!", { reply_to_message_id: message.message_id })
              return
            } 
            if ((rows.cash - CashToGive) < 0) {
              CashToGive = rows.cash
            }
            db.run('UPDATE users SET cash = cash - ? WHERE id = ?',[CashToGive, user_id])
            db.run('UPDATE users SET cash = cash + ? WHERE id = ?',[CashToGive, message.reply_to_message.from.id])
      
            await bot.sendMessage(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ' + FormatNum(CashToGive) + "$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + message.reply_to_message.from.first_name, { reply_to_message_id: message.message_id });
          })}
        })
      }
      else if (message.text.slice(0,7) == "/give_v") {
        if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
        db.get("SELECT videocards, isVIP FROM users WHERE id=?",[message.reply_to_message.from.id], async (err,rowr) => {
          if (rowr == undefined) {
            bot.sendMessage(message.chat.id, "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!", { reply_to_message_id: message.message_id })
          }else {
            db.get("SELECT videocards FROM users WHERE id=?",[user_id], async (err,rows) => {
              if (CheckAccount(rows,message)) {return}
           
    
            if (user_id == message.reply_to_message.from.id) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!", { reply_to_message_id: message.message_id })
              return
            }
    
            if (message.reply_to_message.from.is_bot) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –±–æ—Ç—É!", { reply_to_message_id: message.message_id })
              return
            }

            if (message.reply_to_message.from.is_bot) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –±–æ—Ç—É!", { reply_to_message_id: message.message_id })
              return
            }            
            



            let VideoToGive = message.text.split(" ")[1]
            try {
              if (Number.isNaN(Number(VideoToGive))) {return}
            }
            catch (error) {
              console.error(error)
              bot.sendMessage(message.chat.id, "–î–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–∏—Å–ª–æ–≤—ã–º!", { reply_to_message_id: message.message_id })
              return
            }


            
            const user_vip = MaxVideocards[rowr.isVIP]
            if (VideoToGive <= 0) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é!", { reply_to_message_id: message.message_id })
              return
            }
            if (Number.isInteger(Number(VideoToGive)) == false) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ!", { reply_to_message_id: message.message_id })
              return
            }
            if ((VideoToGive + rowr.videocards) >= user_vip) {
              bot.sendMessage(message.chat.id, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é! –£ –Ω–µ–≥–æ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç.", { reply_to_message_id: message.message_id })
              return
            }
            if ((rows.videocards - VideoToGive) < 0) {
              VideoToGive = rows.videocards
            }
            db.run('UPDATE users SET videocards = videocards - ? WHERE id = ?',[VideoToGive, user_id])
            db.run('UPDATE users SET videocards = videocards + ? WHERE id = ?',[VideoToGive, message.reply_to_message.from.id])
      
            await bot.sendMessage(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ' + FormatNum(VideoToGive) + " –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + message.reply_to_message.from.first_name, { reply_to_message_id: message.message_id });
           })}
        })
      }


      else if (message.text.slice(0,8) == "/profile"  || message.text.slice(0,22) == "/profile@eventshol_bot") {
        
        let current_clan;
        let profile_text = "–û—à–∏–±–∫–∞"
        if (message.entities[1]) {
          const entity = message.entities[1]
          if (entity.type == "mention") {
            const CurentUser = message.text.slice(entity.offset + 1,entity.offset + entity.length)
            db.get("SELECT name, id, cash, isVIP, videocards, clan FROM users WHERE mention=?", CurentUser, async (err, row) => {
 
              if (row == undefined) { await bot.sendMessage(message.chat.id, "‚úñÔ∏è–£ –æ—Ç–º–µ—á–µ–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞", { reply_to_message_id: message.message_id });;return}
                           
              if (row.clan === '0'){
                lastToId = row.id
                current_clan = '–Ω–µ—Ç'
                profile_text = `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @${CurentUser}: \nü™™ –ò–º—è: ${row.name} \nüÜî ID: ${row.id} \nüíµ –î–µ–Ω—å–≥–∏: ${FormatNum(row.cash)}$ \n‚≠êÔ∏è VIP: ${VipRangs[row.isVIP]} \nüìº –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: ${row.videocards}\nüè∞ –ö–ª–∞–Ω: ${current_clan}`;
                await bot.sendMessage(message.chat.id, profile_text, { parse_mode: 'HTML', reply_to_message_id: message.message_id, reply_markup:           JSON.stringify({
                  inline_keyboard: [
                    [{ text: '‚úâÔ∏è–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω', callback_data: 'invite'}],
                  ]
                }
              )}); 
              return
              } else {
                current_clan = row.clan
                profile_text = `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @${CurentUser}: \nü™™ –ò–º—è: ${row.name} \nüÜî ID: ${row.id} \nüíµ –î–µ–Ω—å–≥–∏: ${FormatNum(row.cash)}$ \n‚≠êÔ∏è VIP: ${VipRangs[row.isVIP]} \nüìº –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: ${row.videocards}\nüè∞ –ö–ª–∞–Ω: ${current_clan}`;
                await bot.sendMessage(message.chat.id, profile_text, { parse_mode: 'HTML', reply_to_message_id: message.message_id });
              }
              
              
            });
          } return
        
        }else {
          if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
          db.get("SELECT name, id, cash, isVIP, videocards, clan FROM users WHERE id=?", message.reply_to_message.from.id, async (err, row) => {
            
            if (row == undefined) { await bot.sendMessage(message.chat.id, "‚úñÔ∏è–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!", { reply_to_message_id: message.message_id });return}
                     
            let profile_text = `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <a href='tg://user?id=${row.id}'>${message.reply_to_message.from.first_name}</a>: \nü™™ –ò–º—è: ${row.name} \nüÜî ID: ${row.id} \nüíµ –î–µ–Ω—å–≥–∏: ${FormatNum(row.cash)}$ \n‚≠êÔ∏è VIP: ${VipRangs[row.isVIP]} \nüìº –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: ${row.videocards}\nüè∞ –ö–ª–∞–Ω: ${current_clan}`;
            if (row.clan === '0'){
              lastToId = row.id
              current_clan = '–Ω–µ—Ç' 
              profile_text = `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <a href='tg://user?id=${row.id}'>${message.reply_to_message.from.first_name}</a>: \nü™™ –ò–º—è: ${row.name} \nüÜî ID: ${row.id} \nüíµ –î–µ–Ω—å–≥–∏: ${FormatNum(row.cash)}$ \n‚≠êÔ∏è VIP: ${VipRangs[row.isVIP]} \nüìº –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: ${row.videocards}\nüè∞ –ö–ª–∞–Ω: ${current_clan}`;
              await bot.sendMessage(message.chat.id, profile_text, { reply_to_message_id: message.message_id, parse_mode: 'HTML', reply_markup:           JSON.stringify({
                inline_keyboard: [
                  [{ text: '‚úâÔ∏è–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω', callback_data: 'invite'}],
                ]
              }
            )}); 
            return
            
            } else {
              current_clan = row.clan
              profile_text = `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${message.reply_to_message.from.first_name}: \nü™™ –ò–º—è: ${row.name} \nüÜî ID: ${row.id} \nüíµ –î–µ–Ω—å–≥–∏: ${FormatNum(row.cash)}$ \n‚≠êÔ∏è VIP: ${VipRangs[row.isVIP]} \nüìº –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: ${row.videocards}\nüè∞ –ö–ª–∞–Ω: ${current_clan}`;
              await bot.sendMessage(message.chat.id, profile_text, { parse_mode: 'HTML', reply_to_message_id: message.message_id });
            }
            });
            return
        } 
      } else if (message.text == "/clans" || message.text.toLowerCase() == "–∫–ª–∞–Ω—ã") {
        try {let msg = "ü§ë–¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∫–ª–∞–Ω–æ–≤:\n"
        let index = 0
        db.each("SELECT Name name, Money money FROM clans ORDER BY -money LIMIT 10", [], (err, row) => {
          index++
          msg = `${msg} \n<code>${index}) ${row.name} - ${String(FormatNum(row.money))}$</code>`
        }, async () => {
          await bot.sendMessage(message.chat.id, msg, { reply_to_message_id: message.message_id, parse_mode: "HTML", reply_markup:
          JSON.stringify({
            inline_keyboard: [
              [{ text: '‚ûï–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω –∑–∞ 20–ú$', callback_data: 'create'}],
            ]
          }
        ) })
        })} catch (error){
          console.log(error)
        }

      }
      else if (message.text.slice(0,5) == "/code" || message.text.toLowerCase() == "–∫–æ–¥") {
        try {
          var code = message.text.slice(6);
          bot.sendMessage(message.chat.id, `<pre>${code}</pre> \n<`, {reply_to_message_id: message.message_id, parse_mode: "HTML"})
        } catch (error){
          console.log(error)
          bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞!", {reply_to_message_id: message.message_id })
        }

      }
      else if (message.text.slice(0,5) == "/echo") {
        try {
          var code = message.text.slice(6);
          console.log(message)
        } catch (error){
          console.log(error)
          bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞!", {reply_to_message_id: message.message_id })
        }

      }
      else if (message.text.slice(0,9) == "/post_sub" || message.text.toLowerCase() == "–ø–æ–¥–ø–∏—Å–∫–∞" || message.text.toLowerCase() == "—Ä–∞—Å—Å—ã–ª–∫–∞") {
        try {
          db.get("SELECT posting FROM users WHERE id=?", message.from.id, async (err, row) => {
            if (row.posting == 0){
              db.run("UPDATE users SET posting = ? WHERE id = ?", [1, message.from.id])
              bot.sendMessage(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ –∫–∞–Ω–∞–ª–∞ @eventshol_live! \n–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ /post_sub.", {reply_to_message: message.message_id});
            }
            else {
              db.run("UPDATE users SET posting = ? WHERE id = ?", [0, message.from.id])
              bot.sendMessage(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ @eventshol_live! \n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ /post_sub.", {reply_to_message: message.message_id});
            }
          }); 
          
        } catch (error){
          console.log(error)
          bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞!", {reply_to_message_id: message.message_id })
        }

      }
      else if (message.text.slice(0,6) == "/vip" || message.text.toLowerCase() == "–≤–∏–ø") {
        const vips = [
          `‚îå –ë–µ–∑ VIP'–∞:\n‚îú‚îÄ –õ–∏–º–∏—Ç ${MaxVideocards[0]} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç\n‚îú‚îÄ –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥. –¥–æ–±—ã—á–∏ ${FarmingTimers[0]/180} —á–∞—Å–∞\n‚îî‚îÄ ${Multiplies[0]}x –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–±—ã—Ç—ã—Ö –¥–µ–Ω–µ–≥`,

          `‚îå ${VipRangs[1]}:\n‚îú‚îÄ –õ–∏–º–∏—Ç ${MaxVideocards[1]} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç\n‚îÄ –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥. –¥–æ–±—ã—á–∏ ${FarmingTimers[1]/180} —á–∞—Å\n‚îî‚îÄ ${Multiplies[1]}x –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–±—ã—Ç—ã—Ö –¥–µ–Ω–µ–≥`,

          
          `‚îå ${VipRangs[2]}:\n‚îú‚îÄ –õ–∏–º–∏—Ç ${MaxVideocards[2]} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç\n‚îú‚îÄ –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥. –¥–æ–±—ã—á–∏ ${FarmingTimers[2]/180} –º–∏–Ω—É—Ç\n‚îî‚îÄ ${Multiplies[2]}x –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–±—ã—Ç—ã—Ö –¥–µ–Ω–µ–≥`
        ]
        try {
          db.get("SELECT isVIP FROM users WHERE id=?", message.from.id, async (err, row) => {
            bot.sendMessage(message.chat.id, `–¢–≤–æ–π VIP: ${VipRangs[row.isVIP]}! \n\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ VIP: <code>\n${vips[0]} \n\n${vips[1]} \n\n${vips[2]}</code>`, {reply_to_message_id: message.message_id, parse_mode: 'HTML' })
          }); 
          
        } catch (error){
          console.log(error)
          bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞!", {reply_to_message_id: message.message_id })
        }

      }
      else if (message.text.slice(0,6) == "/donate" || message.text.toLowerCase() == "–¥–æ–Ω–∞—Ç") {
        try {
          bot.sendInvoice(message.chat.id, )
        } catch (error){
          console.log(error)
          bot.sendMessage(message.chat.id, "–û—à–∏–±–∫–∞!", {reply_to_message_id: message.message_id })
        }

      }

    } catch (error) {
      console.log(error)
    }

    ///// –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ /////
    try {
      if (message.text.slice(0,5) == "/sudo") {
        if (!CheckAdmin(message)) {await bot.sendMessage(message.chat.id,"–¢—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!", {reply_to_message_id: message.message_id });return}
        
        try {
          let args = message.text.slice(5) 

          try {
            if (args.slice(0,5) == ".cash") {
              if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
              try {
                let sum

                if (args.slice(6,7) == "=") {

                  try {
                    sum = Number(args.slice(8))
                  } catch (error) {
                    console.log(error);
                  }
                  db.run('UPDATE users SET cash = ? WHERE id = ?', [sum,message.reply_to_message.from.id]);
                }
                else if (args.slice(6,7) == "-") {
                  try {
                    sum = Number(args.slice(8))
                  } catch (error) {
                    console.log(error);
                  }
                  db.run('UPDATE users SET cash = cash - ? WHERE id = ?', [sum,message.reply_to_message.from.id]);
                }
                else if (args.slice(6,7) == "+") {
                  try {
                    sum = Number(args.slice(8))
                  } catch (error) {
                    console.log(error);
                  }
                  db.run('UPDATE users SET cash = cash + ? WHERE id = ?', [sum,message.reply_to_message.from.id]);
                }
                else {
                  await bot.sendMessage(message.chat.id,"–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏–±–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!", {reply_to_message_id: message.message_id })
                }
              } catch (error) {
                
              }
              
            } 
            else if (args.slice(0,11) == ".videocards") {
              if (!message.reply_to_message) {await bot.sendMessage(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! ", {reply_to_message_id: message.message_id });return}
              try {
                let sum

                if (args.slice(12,13) == "=") {

                  try {
                    sum = Number(args.slice(14))
                  } catch (error) {
                  }

                  db.run('UPDATE users SET videocards = ? WHERE id = ?', [sum,message.reply_to_message.from.id]);
                }
                else if (args.slice(12,13) == "-") {
                  try {
                    sum = Number(args.slice(14))
                  } catch (error) {
                  }
                  db.run('UPDATE users SET videocards = videocards - ? WHERE id = ?', [sum,message.reply_to_message.from.id]);
                }
                else if (args.slice(12,13) == "+") {
                  try {
                    sum = Number(args.slice(14))
                  } catch (error) {
                  }
                  db.run('UPDATE users SET videocards = videocards + ? WHERE id = ?', [sum,message.reply_to_message.from.id]);
                }
                else { 
                  await bot.sendMessage(message.chat.id,"–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏–±–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!", {reply_to_message_id: message.message_id })
                }
              } catch (error) {
                
              }
              
            } else if (args.slice(0,4) == ".say") {
              try {
                text = args.slice(5)
              } catch (error) {

              }
              if (message.reply_to_message) 
              {
                bot.sendMessage(message.chat.id, text, {reply_to_message_id: message.reply_to_message.message_id, parse_mode: 'HTML' })
                bot.deleteMessage(message.chat.id, message.message_id)
                return
              } else {
                bot.sendMessage(message.chat.id, text, { parse_mode: 'HTML' })
                bot.deleteMessage(message.chat.id, message.message_id)
                return
              }
            
            }
            else if (args.slice(0, 5) == ".send") {
              try {
                const words = message.text.split(" ");
                const id = words[1];
                const text = words.slice(2).join(" ");
                bot.sendMessage(id, text, { parse_mode: "HTML" });
                bot.sendMessage(message.chat.id, `–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${id}!`);
              } catch (error) {
                if (error.message.includes("Chat not found")) {
                bot.sendMessage(message.chat.id, "–¢–∞–∫–æ–≥–æ ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                return;
              } else {
                
              }
              }
              }

              else if (args.slice(0, 11) == ".event.stop") {
                try {
                  db.run('UPDATE users SET posting = 1');
                  bot.sendMessage(message.chat.id, "–£—Å–ø–µ—à–Ω–æ!")
                } catch (error) {
                  console.log(error);
                }
                }
              
                else if (args.slice(0, 7) == ".groups") {
                const chats = await bot.getChats();

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.sendMessage(msg.chat.id, `–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —è —Å–æ—Å—Ç–æ—é: ${chats.filter((chat) => chat.type === "group").map((chat) => chat.title).join("\n")}`);
              }
            else {
              await bot.sendMessage(message.chat.id,"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞", {reply_to_message_id: message.message_id })
            }
          } catch (error) {
            console.log(error)
          }
        } 
        
        catch (error) {
          await bot.sendMessage(message.chat.id,"–ê—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã!", {reply_to_message_id: message.message_id })
        }
      }else if (message.text.slice(0,6) == ".leave") {
        try {
          const words = message.text.split(" ");
          const id = words[1];
          await bot.leaveChat(id);
      
          bot.sendMessage(message.chat.id, `–Ø –≤—ã—à–µ–ª –∏–∑ –≥—Ä—É–ø–ø—ã ${id}!`);
        } catch (error) {
          console.log(error)
        }

      }else{
        if (message.chat.type == 'private' && message.text.slice(0,1) != '/'){
          bot.sendMessage(admins_id[0], `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${profile_link} (<code>${user_id}</code>):\n${message.text}`, { parse_mode:"HTML" })
        }else{
          
        }
      }
      
    } catch (error) {
    }
})




//–û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö 
bot.on('callback_query', async (callbackQuery) => {
  try {
  const call = callbackQuery;
  const msg = call.message;
  const user_id = call.from.id
  const profile_link = `<a href='tg://user?id=${user_id}'> ${call.from.first_name} </a>`
  
  if (call.data == '/start.commands') {
    let text = `${profile_link} –≤—ã–∑–≤–∞–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n`;
    commands.forEach((command) => {
      text+= "\n" + command
    })
    await bot.sendMessage(msg.chat.id, `<i>${text}</i>`, { reply_to_message_id: msg.message_id, parse_mode: "HTML" });
  }  
  
  else if (call.data == '/shop.1Videocard') {
    db.get("SELECT videocards,isVIP,cash FROM users WHERE id = ?", [user_id], async (err, row) => {
      if (row == undefined){bot.sendMessage(msg.chat.id, `‚ùóÔ∏è ${profile_link}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`);return}
      let canBuy = row.cash > 50000 && row.videocards + 1 <= MaxVideocards[row.isVIP];
  
      if (canBuy) {
        db.run('UPDATE users SET videocards = videocards + 1, cash = cash - 50000 WHERE id = ?', [user_id]);
        await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name +" —Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª 1 –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É!",{ reply_to_message_id: msg.message_id });
        return;
      }
      await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name + ", —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å 1 –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É! \n–£ —Ç–µ–±—è –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ª–∏–±–æ —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.",{ reply_to_message_id: msg.message_id });
    });
  
  }else if (call.data == '/shop.50Videocard') {
    db.get("SELECT videocards,isVIP,cash FROM users WHERE id = ?", [user_id], async (err, row) => {
      if (row == undefined){bot.sendMessage(msg.chat.id, `‚ùóÔ∏è ${profile_link}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`);return}
      let canBuy = row.cash > 2500000 && row.videocards + 50 <= MaxVideocards[row.isVIP];
  
      if (canBuy) {
        db.run('UPDATE users SET videocards = videocards + 50, cash = cash - 2500000 WHERE id = ?', [user_id]);
        await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name +" —Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª 50 –≤–∏–¥–µ–æ–∫–∞—Ä—Ç!",{ reply_to_message_id: msg.message_id });
        return;
      }
      await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name + ", —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å 50 –≤–∏–¥–µ–æ–∫–∞—Ä—Ç! \n–£ —Ç–µ–±—è –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ª–∏–±–æ —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.",{ reply_to_message_id: msg.message_id });
    });
  }else if (call.data == '/shop.100Videocard') {
    db.get("SELECT videocards,isVIP,cash FROM users WHERE id = ?", [user_id], async (err, row) => {
      if (row == undefined){bot.sendMessage(msg.chat.id, `‚ùóÔ∏è ${profile_link}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`);return}
      let canBuy = row.cash > 5000000 && row.videocards + 100 <= MaxVideocards[row.isVIP];
  
      if (canBuy) {
        db.run('UPDATE users SET videocards = videocards + 100, cash = cash - 5000000 WHERE id = ?', [user_id]);
        await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name +" —Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª 100 –≤–∏–¥–µ–æ–∫–∞—Ä—Ç!", { reply_to_message_id: msg.message_id });
        return;
      }
      await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name + ", —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å 100 –≤–∏–¥–µ–æ–∫–∞—Ä—Ç! \n–£ —Ç–µ–±—è –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ª–∏–±–æ —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.", { reply_to_message_id: msg.message_id });
    });
  }
  
  else if (call.data == '/shop.vip') {
    db.get("SELECT isVIP,cash FROM users WHERE id = ?", user_id, async (err, row) => {
      if (row == undefined){bot.sendMessage(msg.chat.id, `‚ùóÔ∏è ${profile_link}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`);return}
      let canBuy = row.cash >= 1000000 && row.isVIP < 1 ? true:false;
  
      if (canBuy) {
        db.run('UPDATE users SET isVIP = 1, cash = cash - 1000000 WHERE id = ?', [user_id]);
        await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name +" —Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª ‚≠êÔ∏èVIP!",{ reply_to_message_id: msg.message_id });
        return;
      }
      await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name + ", —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å ‚≠êÔ∏èVIP!",{ reply_to_message_id: msg.message_id });
    });
  
  }else if (call.data == '/shop.megavip') {
    db.get("SELECT isVIP,cash FROM users WHERE id = ?", [user_id], async (err, row) => {
      if (row == undefined){bot.sendMessage(msg.chat.id, `‚ùóÔ∏è ${profile_link}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`);return}
      let canBuy = row.cash >= 50000000 && row.isVIP < 2 ? true:false;
  
      if (canBuy) {
        db.run('UPDATE users SET isVIP = 2, cash = cash - 50000000 WHERE id = ?', [user_id]);
        await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name +" —Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª üåüMEGAVIP!",{ reply_to_message_id: msg.message_id });
        return;
      }
      await bot.sendMessage(msg.chat.id, callbackQuery.from.first_name + ", —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å üåüMEGAVIP!",{ reply_to_message_id: msg.message_id });
    });
  
  }
  else if (call.data === 'invite') {
    if (lastToId === 0) {
      bot.sendMessage(call.message.chat.id, `‚ùóÔ∏è ${profile_link}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});
    } else {
      const clanmarkup = {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: 'inv_yes' },
            { text: '‚ùé –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'inv_no' },
          ],
        ],
      };

      db.get('SELECT owner, name FROM clans WHERE owner=?', [user_id], (err, row) => {
        if (err) {
          console.error(err);
          return;
        }

        if (!row) {
          bot.sendMessage(call.message.chat.id, `‚ùóÔ∏è ${profile_link}, —Ç—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞!`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});
          lastToId = 0;
        } else {
          db.run('INSERT INTO invitations (inviter_id, clan_name, invited_id) VALUES (?, ?, ?)', [user_id, row.name, lastToId], (err) => {
            if (err) {
              console.error(err);
              return;
            }

            bot.sendMessage(call.message.chat.id, `${profile_link}, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});
            bot.sendMessage(lastToId, `‚úâÔ∏è ${profile_link} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –≤ —Å–≤–æ–π –∫–ª–∞–Ω!`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML',
              reply_markup: clanmarkup,
            });
            lastToId = 0;
          });
        }
      });
    }
  } else if (call.data === 'create') {
    db.get('SELECT cash, clan, id FROM users WHERE id=?', [user_id], (err, row) => {
      if (row == undefined){bot.sendMessage(msg.chat.id, `‚ùóÔ∏è ${profile_link}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});return}
      if (err) {
        console.error(err);
        return;
      }

      const cash = row.cash;
      const myclan = row.clan;

      if (cash != undefined) { 
        db.all('SELECT owner FROM clans', (err, clans) => {
          if (err) {
            console.error(err);
            return;
          }

          if (clans.length === 0) {
            if (call.message.chat.type !== 'private') {
              bot.sendMessage(call.message.chat.id, `‚ùå ${profile_link}, –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});
            } else {
              bot.sendMessage(call.message.chat.id, 'üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–Ω–∞: \n –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞.');
              bot.once('text', (msg) => {
                createProcess(user_id, msg);
              });
            }
          } else {
            if (row.id === clans[0].owner) {
              bot.sendMessage(call.message.chat.id, `‚ùóÔ∏è${profile_link}, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ ${row.clan}!`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});
            } else if (myclan !== "0") {
              bot.sendMessage(call.message.chat.id, `‚ùóÔ∏è${profile_link}, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–ª–∞–Ω ${row.clan}!`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});
            } else {
              if (call.message.chat.type !== 'private') {
                bot.answerCallbackQuery(call.id, {text: `‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.`, show_alert: true});
              } else {
                bot.sendMessage(call.message.chat.id, 'üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–Ω–∞: \n –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞.');
                bot.once('text', (msg) => {
                  createProcess(user_id, msg);
                });
              }
            }
          }
        });
      } else {
        bot.sendMessage(call.message.chat.id, `‚ùóÔ∏è${profile_link}, —É —Ç–µ–±—è –Ω–µ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});
      }
    });
  } else if (call.data === 'inv_yes') {
    try {
    db.get('SELECT inviter_id, clan_name FROM invitations WHERE invited_id=?', [user_id], (err, invitation) => {
      if (err) {
        console.error(err);
        return;
      }

      const inviter_id = invitation.inviter_id;
      const clan_name = invitation.clan_name;

      db.run('UPDATE users SET clan=? WHERE id=?', [clan_name, user_id], (err) => {
        if (invitation == undefined){bot.sendMessage(msg.chat.id, `‚ùóÔ∏è ${profile_link}, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!\n–ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`, { reply_to_message_id: msg.message_id, parse_mode: 'HTML'});return}

        if (err) {
          console.error(err);
          return;
        }

        bot.sendMessage(user_id, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω ${clan_name}!`);
        bot.deleteMessage(msg.chat.id, msg.message_id);
        bot.sendMessage(inviter_id, `–í–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω ${clan_name} –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ!`);
        lastToId = 0;
      });

      db.run('DELETE FROM invitations WHERE invited_id=?', [user_id], (err) => {
        if (err) {
          console.error(err);
          return
        } 
      });
    });} catch (error) {
      console.log(error) 
      return
    }
  } else if (call.data === 'inv_no') {
    try {
    db.get('SELECT inviter_id, clan_name FROM invitations WHERE invited_id=?', [user_id], (err, invitation) => {
      
      if (err) {
        console.error(err);
        return;
      }

      const inviter_id = invitation.inviter_id;
      const clan_name = invitation.clan_name;
      bot.sendMessage(user_id, '–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω!');
      bot.deleteMessage(msg.chat.id, msg.message_id);  
      bot.sendMessage(inviter_id, `–í–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω ${clan_name} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!`);
      lastToId = 0;

      db.run('DELETE FROM invitations WHERE invited_id=?', [user_id], (err) => {
        if (err) {
          console.error(err);
        }
      });
    });} catch (error) {
      console.log(error)
      return
    }
  }} catch (error) {
    console.log(error)
    return
  }
});